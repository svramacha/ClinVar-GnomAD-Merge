# Load necessary libraries
library(GenomicRanges)
library(httr)
library(jsonlite)
library(Rsamtools)
library(VariantAnnotation)

library(httr)
library(jsonlite)
library(VariantAnnotation)

combine_gene_data <- function(gene, chrom, start, stop, gnomad_url, clinvar_vcf_path, cadd_file_path) {
  # GraphQL query for gnomAD API
  query <- '
  query GeneVariantsFilteringAF($chrom: String!, $start: Int!, $stop: Int!) {
    region(chrom: $chrom, start: $start, stop: $stop, reference_genome: GRCh38) {
      variants(dataset: gnomad_r4) {
        variant_id
        ref
        alt
        flags
        joint {
          ac
          an
          filters
          fafmax {
            faf95_max
            faf95_max_gen_anc
          }
        }
      }
    }
  }
  '
  
  # Query variables
  variables <- list(
    chrom = chrom,
    start = start,
    stop = stop
  )
  
  # Create the POST request body
  body <- toJSON(list(
    query = query,
    variables = variables
  ), auto_unbox = TRUE)
  
  # Make the API call
  response <- POST(
    gnomad_url,
    body = body,
    encode = "raw", 
    content_type("application/json"),
    timeout(60)
  )
  
  # Check response status
  if (status_code(response) != 200) {
    stop("Error fetching data from gnomAD API. Status code: ", status_code(response))
  }
  
  data <- content(response, "parsed")
  variants <- data$data$region$variants
  
  if (is.null(variants)) {
    warning("No variants found in gnomAD for this region.")
    return(data.frame())
  }
  
  # Process gnomAD data
  variant_list <- lapply(variants, function(variant) {
    data.frame(
      variant_id = ifelse(!is.null(variant$variant_id), variant$variant_id, NA),
      ref = ifelse(!is.null(variant$ref), variant$ref, NA),
      alt = ifelse(!is.null(variant$alt), variant$alt, NA),
      flags = ifelse(!is.null(variant$flags), paste(variant$flags, collapse = ","), NA),
      ac = ifelse(!is.null(variant$joint$ac), variant$joint$ac, NA),
      an = ifelse(!is.null(variant$joint$an), variant$joint$an, NA),
      filters = ifelse(!is.null(variant$joint$filters), paste(variant$joint$filters, collapse = ","), NA),
      faf95_max = ifelse(!is.null(variant$joint$fafmax$faf95_max), variant$joint$fafmax$faf95_max, NA),
      faf95_max_gen_anc = ifelse(!is.null(variant$joint$fafmax$faf95_max_gen_anc), variant$joint$fafmax$faf95_max_gen_anc, NA)
    )
  })
  
  gnomad_df <- do.call(rbind, variant_list)
  gnomad_df$chrom <- chrom
  gnomad_df$start <- start
  gnomad_df$stop <- stop
  
  # Load ClinVar data
  clinvar_vcf <- readVcf(clinvar_vcf_path, "hg38")
  clinvar_df <- as.data.frame(info(clinvar_vcf))
  clinvar_df <- clinvar_df[clinvar_df$CLNDN == gene, ]
  
  # Load CADD data
  cadd_df <- read.csv(cadd_file_path, sep = "\t", header = TRUE)
  cadd_df_filtered <- subset(cadd_df, CHROM == chrom & POS >= start & POS <= stop)
  
  # Merge datasets
  combined_df <- merge(gnomad_df, clinvar_df, by.x = "variant_id", by.y = "ID", all.x = TRUE)
  combined_df <- merge(combined_df, cadd_df_filtered, by.x = "variant_id", by.y = "ID", all.x = TRUE)
  
  return(combined_df)
}


# Example usage
gnomad_url <- "https://gnomad.broadinstitute.org/api"
clinvar_vcf_path <- "path/to/clinvar.vcf.gz"
cadd_file_path <- "path/to/cadd.tsv"

gene_combined_data <- combine_gene_data("PTEN", "chr10", 87863114, 87971941, gnomad_url, clinvar_vcf_path, cadd_file_path)
head(gene_combined_data)